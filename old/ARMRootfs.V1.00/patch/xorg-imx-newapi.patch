diff -Naur xserver-xorg-video-imx-11.09.01/src/imx_display.c xserver-xorg-video-imx-11.09.01-new/src/imx_display.c
--- xserver-xorg-video-imx-11.09.01/src/imx_display.c	2011-07-27 05:22:47.000000000 +0800
+++ xserver-xorg-video-imx-11.09.01-new/src/imx_display.c	2012-12-13 14:28:20.179818593 +0800
@@ -1463,34 +1463,39 @@
 /* -------------------------------------------------------------------- */
 
 Bool
-imxDisplaySwitchMode(int scrnIndex, DisplayModePtr mode, int flags)
+/*imxDisplaySwitchMode(int scrnIndex, DisplayModePtr mode, int flags)*/
+imxDisplaySwitchMode(ScrnInfoPtr pScrn, DisplayModePtr mode)
 {
-	ScrnInfoPtr pScrn = xf86Screens[scrnIndex];
+/*	ScrnInfoPtr pScrn = xf86Screens[scrnIndex];*/
 
 	return xf86SetSingleMode(pScrn, mode, RR_Rotate_0);
 }
 
 void
-imxDisplayAdjustFrame(int scrnIndex, int x, int y, int flags)
+/*imxDisplayAdjustFrame(int scrnIndex, int x, int y, int flags)*/
+imxDisplayAdjustFrame(ScrnInfoPtr ptr, int x, int y)
 {
 //	fbdevHWAdjustFrame(scrnIndex, x, y, flags);
 }
 
 Bool
-imxDisplayEnterVT(int scrnIndex, int flags)
+/*imxDisplayEnterVT(int scrnIndex, int flags)*/
+imxDisplayEnterVT(ScrnInfoPtr pScrn)
 {
-	ScrnInfoPtr pScrn = xf86Screens[scrnIndex];
+/*	ScrnInfoPtr pScrn = xf86Screens[scrnIndex]; */
 
 	return xf86SetDesiredModes(pScrn);
 }
 
 void
-imxDisplayLeaveVT(int scrnIndex, int flags)
+/*imxDisplayLeaveVT(int scrnIndex, int flags)*/
+imxDisplayLeaveVT(ScrnInfoPtr pScrn)
 {
 }
 
 ModeStatus
-imxDisplayValidMode(int scrnIndex, DisplayModePtr mode, Bool verbose, int flags)
+/*imxDisplayValidMode(int scrnIndex, DisplayModePtr mode, Bool verbose, int flags)*/
+imxDisplayValidMode(ScrnInfoPtr ptr, DisplayModePtr mode, Bool verbose, int flags)
 {
 	return MODE_OK;
 }
diff -Naur xserver-xorg-video-imx-11.09.01/src/imx_display.h xserver-xorg-video-imx-11.09.01-new/src/imx_display.h
--- xserver-xorg-video-imx-11.09.01/src/imx_display.h	2011-07-27 05:22:47.000000000 +0800
+++ xserver-xorg-video-imx-11.09.01-new/src/imx_display.h	2012-12-13 14:28:57.678657011 +0800
@@ -55,20 +55,25 @@
 imxDisplayFinishScreenInit(int scrnIndex, ScreenPtr pScreen);
 
 extern ModeStatus
-imxDisplayValidMode(int scrnIndex, DisplayModePtr mode,
-			Bool verbose, int flags);
+/*imxDisplayValidMode(int scrnIndex, DisplayModePtr mode,
+			Bool verbose, int flags);*/
+imxDisplayValidMode(ScrnInfoPtr ptr, DisplayModePtr mode, Bool verbose, int flags);
 
 extern Bool
-imxDisplaySwitchMode(int scrnIndex, DisplayModePtr mode, int flags);
+/*imxDisplaySwitchMode(int scrnIndex, DisplayModePtr mode, int flags);*/
+imxDisplaySwitchMode(ScrnInfoPtr pScrn, DisplayModePtr mode);
 
 extern void
-imxDisplayAdjustFrame(int scrnIndex, int x, int y, int flags);
+/*imxDisplayAdjustFrame(int scrnIndex, int x, int y, int flags);*/
+imxDisplayAdjustFrame(ScrnInfoPtr ptr, int x, int y);
 
 extern Bool
-imxDisplayEnterVT(int scrnIndex, int flags);
+/*imxDisplayEnterVT(int scrnIndex, int flags);*/
+imxDisplayEnterVT(ScrnInfoPtr pSrcn);
 
 extern void
-imxDisplayLeaveVT(int scrnIndex, int flags);
+/*imxDisplayLeaveVT(int scrnIndex, int flags);*/
+imxDisplayLeaveVT(ScrnInfoPtr);
 
 extern Bool
 imxDisplayChangeFrameBufferRotateEPDC(int scrnIndex, int fbRotate);
diff -Naur xserver-xorg-video-imx-11.09.01/src/imx_driver.c xserver-xorg-video-imx-11.09.01-new/src/imx_driver.c
--- xserver-xorg-video-imx-11.09.01/src/imx_driver.c	2011-07-27 05:22:47.000000000 +0800
+++ xserver-xorg-video-imx-11.09.01-new/src/imx_driver.c	2012-12-13 14:42:19.183602978 +0800
@@ -172,9 +172,10 @@
 	struct fb_var_screeninfo fbVarScreenInfo;
 	if (-1 == ioctl(fd,FBIOGET_VSCREENINFO,(void*)(&fbVarScreenInfo))) {
 		xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
-			   "FBIOGET_VSCREENINFO: %s\n", strerror(errno));
+			   "FBIOGET_VSCREENINFO: hehe %s\n", strerror(errno));
 		return FALSE;
 	}
+xf86Msg(X_WARNING, "strFormat=%s, %s:%d\n", strFormat, __FILE__, __LINE__);
 
 	/* Find the requested EPDC format and change if requested */
 	if (NULL != strFormat) {
@@ -204,7 +205,7 @@
 	fbVarScreenInfo.activate = FB_ACTIVATE_FORCE;
 	if (-1 == ioctl(fd,FBIOPUT_VSCREENINFO,(void*)(&fbVarScreenInfo))) {
 		xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
-			   "FBIOPUT_VSCREENINFO: %s\n", strerror(errno));
+			   "FBIOPUT_VSCREENINFO: xx %s\n", strerror(errno));
 		return FALSE;
 	}
 
@@ -255,6 +256,7 @@
 
 	/* Open the frame buffer device */
 	int fd = open(fbdevName,O_RDWR,0);
+xf86Msg(X_WARNING, "fbdevName=%s, fd=%d, %s:%d\n", fbdevName, fd, __FILE__, __LINE__);
 	if (fd == -1) {
 		xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
 			"open %s: %s\n", fbdevName, strerror(errno));
@@ -435,25 +437,29 @@
 }
 
 static void
-imxFreeScreen(int scrnIndex, int flags)
+imxFreeScreen(ScrnInfoPtr pScrn)
 {
-	ScrnInfoPtr pScrn = xf86Screens[scrnIndex];
+/*	ScrnInfoPtr pScrn = xf86Screens[scrnIndex]; */
 
 	imxFreeRec(pScrn);
 }
 
 static Bool
-imxCloseScreen(int scrnIndex, ScreenPtr pScreen)
+/*imxCloseScreen(int scrnIndex, ScreenPtr pScreen)*/
+imxCloseScreen(ScreenPtr pScreen)
 {
-	ScrnInfoPtr pScrn = xf86Screens[scrnIndex];
+	ScrnInfoPtr pScrn = xf86Screens[pScreen->myNum];
 	ImxPtr fPtr = IMXPTR(pScrn);
 
+xf86Msg(X_WARNING, "pScreen->myNum=%d, %s:%d\n", pScreen->myNum, __FILE__, __LINE__);
 	fbdevHWRestore(pScrn);
+xf86Msg(X_WARNING, "fbdevHWRestore(OK)\n");
 	fbdevHWUnmapVidmem(pScrn);
+xf86Msg(X_WARNING, "fbdevHWUnmapVidmem(OK)\n");
 	pScrn->vtSema = FALSE;
 
 	pScreen->CloseScreen = fPtr->saveCloseScreen;
-	return (*pScreen->CloseScreen)(scrnIndex, pScreen);
+	return (*pScreen->CloseScreen)(pScreen);
 }
 
 static int
@@ -488,15 +494,16 @@
 }
 
 static Bool
-imxScreenInit(int scrnIndex, ScreenPtr pScreen, int argc, char **argv)
+imxScreenInit(ScreenPtr pScreen, int argc, char **argv)
 {
+	int scrnIndex = pScreen->myNum;		/* compatiable consideration */
 	ScrnInfoPtr pScrn = xf86Screens[pScreen->myNum];
 	ImxPtr fPtr = IMXPTR(pScrn);
 	VisualPtr visual;
 	int init_picture = 0;
 	int ret, flags;
 	int type;
-
+xf86Msg(X_WARNING, "pScreen->myNum=%d, pScrn->scrnIndex=%d, %s:%d\n", pScreen->myNum, pScrn->scrnIndex, __FILE__, __LINE__);
 	xf86DrvMsg(pScrn->scrnIndex, X_INFO,
 		"bitsPerPixel=%d depth=%d defaultVisual=%s\n",
 		pScrn->bitsPerPixel,
diff -Naur xserver-xorg-video-imx-11.09.01/src/imx_exa_z160.c xserver-xorg-video-imx-11.09.01-new/src/imx_exa_z160.c
--- xserver-xorg-video-imx-11.09.01/src/imx_exa_z160.c	2011-07-27 05:22:47.000000000 +0800
+++ xserver-xorg-video-imx-11.09.01-new/src/imx_exa_z160.c	2012-12-12 12:01:57.180274000 +0800
@@ -2504,7 +2504,7 @@
 	/* Install our CloseScreen function so that it gets called. */
 	if (NULL != pScreen->CloseScreen) {
 
-		return (*pScreen->CloseScreen)(scrnIndex, pScreen);
+		return (*pScreen->CloseScreen)(pScreen);
 	}
 
 	return TRUE;
diff -Naur xserver-xorg-video-imx-11.09.01/src/imx_ext.c xserver-xorg-video-imx-11.09.01-new/src/imx_ext.c
--- xserver-xorg-video-imx-11.09.01/src/imx_ext.c	2011-07-27 05:22:47.000000000 +0800
+++ xserver-xorg-video-imx-11.09.01-new/src/imx_ext.c	2012-12-12 12:01:57.180274000 +0800
@@ -32,6 +32,27 @@
 
 #include "imx_ext.h"
 
+#ifdef swapl
+#undef swapl
+/* byte swap a 32-bit value */
+#define swapl(x, n) { \
+		 n = ((char *) (x))[0];\
+		 ((char *) (x))[0] = ((char *) (x))[3];\
+		 ((char *) (x))[3] = n;\
+		 n = ((char *) (x))[1];\
+		 ((char *) (x))[1] = ((char *) (x))[2];\
+		 ((char *) (x))[2] = n; }
+#endif
+
+#ifdef swaps
+#undef swaps
+/* byte swap a short */
+#define swaps(x, n) { \
+		 n = ((char *) (x))[0];\
+		 ((char *) (x))[0] = ((char *) (x))[1];\
+		 ((char *) (x))[1] = n; }
+#endif
+ 
 /* External functions defined elsewhere in the driver. */
 extern Bool
 imxExaZ160GetPixmapProperties(
